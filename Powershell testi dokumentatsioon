Dokumentatsioon Powershelli haldusülesannete kohta





Kasutajate ja gruppide haldus:

Get-Command -Module Microsoft.PowerShell.LocalAccounts - kuvab listi käske, mida kasutada erinevate kasutajahaldusega seotud tegevusteks
                                                         Nt: Add-localGroupMember lisab lokaalsesse gruppi uue kasutaja
                                                         
Get-localuser - kuvab kõik arvutis olevad aktiveeritud ja aktiveerimata kasutajad
             -Name 'guest' | Select-Object * - kuvab kõik kasutajaga 'guest' seotud haldusinfo, nt mil salasõna aegub
             -Name 'administrator' | Select-Object PasswordLastSet - kuvab millal kindel kasutaja viimati enda salasõna muutis
             
  $UserPassword = Read-Host –AsSecureString - annan käsu kuvada loodav salasõna salastatult
  New-LocalUser "Kasutaja" -Password $Userpassword -FullName "Kasutaja" -Description "Kasutaja kirjeldus" - loon uue kasutaja
  Set-LocalUser -Name Kasutaja -Password $UserPassword –Verbose - Vahetan kasutaja kontol salasõna
  Set-LocalUser -Name Kasutaja –PasswordNeverExpires $False - sätestan, et kasutajal salasõna ei aegu
  Remove-LocalUser -Name Kasutaja -Verbose - Kustutan kasutaja konto


Get-LocalGroup - vaatan, millised kasutajate grupid on masinas olemas
  New-LocalGroup Pythoni_Kasutajad -Description 'Pythonile ligipääsuga kasutajate grupp' - loon uue grupi
  Add-LocalgroupMember -Group 'Administrators' -Member('Pythoni_Kasutajad') - Verbose - lisan kõik admini grupis olevad kasutajad ka pythoni kasutajate gruppid
  Get-LocalGroupMember -Group 'Pythoni_Kasutajad' - kuvab kõik soovitud grupis olevad kasutajad.
  Remove-LocalGroupMember -Group 'Pythoni_Kasutajad' –Member 'guest' - eemaldan kasutaja guest pythoni kasutajate kaustast

  
    foreach ($LocalGroup in Get-LocalGroup)
    {
    if (Get-LocalGroupMember $LocalGroup -Member 'Guest' –ErrorAction SilentlyContinue)
    {
    $LocalGroup.Name
    }
    }  ----- lasen arvutil kuvada kõik grupid, kuhu määratud kasutaja kuulub, nt 'guest' kuulub minu masinas vaid Guests gruppi.
    
    
    $search = new-pssession -computer arvutite,nimed
    invoke-command -scriptblock {Get-LocalGroupMember -Group 'Administrators'} -session $search -hidecomputername | select * -exclude RunspaceID | out-gridview -title "LocalAdmins"
    ---- käsk, millega luban kasutajate ja gruppide haldust korraldada ka teisest arvutist, oluline on aga märkida arvutite reaalsed nimed







Active Directory kasutajate haldus PowerShelli kaudu:

Import-Module ActiveDirectory -- Selleks, et AD kasutajaid üldse PSi kaudu haldama hakata, pean esmalt aktiveerima AD mooduli

Get-Command New-ADUser –Syntax --Vaatan, milliseid süntaktilisi elemente on võimalik käsuga New-ADUser kasutada

New-ADUser M.Maasikas -- loon uue kasutaja
    Get-ADUser -Filter * -Properties samAccountName | select samAccountName -- kuvab kõik AD kasutajad
    
    New-ADOrganizationalUnit -Name "Managers" -Path "DC=skriptid,DC=domeen" -- selleks, et oleks OU, kuhu kasutaja luua, loon ka uue OU
    
    New-ADUser -Name "Mari Maasikas" -GivenName "Mari" -Surname "Maasikas" -SamAccountName "M.Maasikas" -UserPrincipalName        "M.Maasikas@skriptid.domeen" -Path "OU=Managers,DC=skriptid,DC=domeen" -AccountPassword(Read-Host -AsSecureString "sisestage salasõna") -Enabled $true --- loon uue kasutaja tegelasele Mari Maasikas, kes kuulub OUsse managers
    
    Get-ADUser M.Maasikas -Properties CanonicalName, Enabled, GivenName, Surname, Name, UserPrincipalName, samAccountName, whenCreated, PasswordLastSet  | Select CanonicalName, Enabled, GivenName, Surname, Name, UserPrincipalName, samAccountName, whenCreated, PasswordLastSet --- kontrollin kas ja mis parameetritega sai Mari Maasika konto ADsse lisatud

Skript, mida kasutades küsib skript kasutajalt loodavate kasutajate arvu ja nime:
  $path="OU=IT,DC=skriptid,DC=domeen"
  $username=Read-Host "Sisestage kasutajanimi"
  $n=Read-Host "Sisestage loodavate kasutajate kogus"
  $count=1..$n
  foreach ($i in $count)
  { New-AdUser -Name $username$i -Path $path -Enabled $True -ChangePasswordAtLogon $true -AccountPassword (ConvertTo-SecureString "Passw0rd!" -AsPlainText -force) -passThru }
  
  Nt tegin sellega 10 ITKasutajad kasutajat ja 2 ITKülalised kasutajat



Skript, mis loeb varem loodud Microsoft Exceli .csv failist info ja seejärel loob kasutajad:

$ADUsers = Import-csv C:\scripts\newusers.csv

foreach ($User in $ADUsers) #####skripti osa, mis selgitab masinale, mida tähendavad Exceli faili erinevad read
{

       $Username    = $User.username
       $Password    = $User.password
       $Firstname   = $User.firstname
       $Lastname    = $User.lastname
    $Department = $User.department
       $OU           = $User.ou

       if (Get-ADUser -F {SamAccountName -eq $Username})  #### skripti osa, mis käseb eelnevalt kontrollida, kas sama nimega kasutaja on juba loodud
       {
               Write-Warning "Kasutaja nimega $Username on juba Active Directorys olemas."
       }
       else  ###Skripti osa, mis sätestab, kuidas kasutajat luua, kui seda veel ADs ei eksisteeri
       {
              New-ADUser `
            -SamAccountName $Username `
            -UserPrincipalName "$Username@domeeninimi.com" `
            -Name "$Firstname $Lastname" `
            -GivenName $Firstname `
            -Surname $Lastname `
            -Enabled $True `
            -ChangePasswordAtLogon $True `
            -DisplayName "$Lastname, $Firstname" `
            -Department $Department `
            -Path $OU `
            -AccountPassword (convertto-securestring $Password -AsPlainText -Force)

       }
}

NB!:nagu skriptis sätestatud, peab .cvd failis olema märgitud eesnimi, perenimi, kasutajanimi, grupp, esmane salasõna ja organisatsiooniline unit kõik eri veergudes







Veebiserveri installeerimine ja haldus skriptidega:

Veebiserveri installeerimiseks kasutatav käsk, kuhu lisatud ka erinevad vajalikud rollid:
Install-WindowsFeature -Name Web-Mgmt-Tools,Web-App-Dev,Web-Security,Web-Performance, Web-Webserver,Web-Application-Proxy -IncludeAllSubFeature


Veebilehe loomise skript PowerShell ISEs:
    Import-Module WebAdministration ###Impordib veebihalduseks vajaliku mooduli
    
    ###Määrame veebilehe nime, nt:
    $Poolinimi = “lehenimi”      
    $versioon = “v4.0”
    $Appinimi = “lehenimi”
    $asukoht = “d:\veebileht”

    cd IIS:\AppPools\ ###Liigub app poolside asukohta

    if (!(Test-Path $Poolinimi -pathType container))  ###Skripti osa, mis kontrollib, kas app pool on loodud ja kui ei ole, siis loob selle järgmise parameetritega
    {
        $appPool = New-Item $PooliNimi
        $appPool | Set-ItemProperty -Name “managedRuntimeVersion” -Value $versioon
        $appPool | Set-ItemProperty -Name “enable32BitAppOnWin64” -Value “FALSE”           
        $appPool | Set-ItemProperty -Name “processModel.loadUserProfile”
      -Value “TRUE”
        $group = [ADSI]”WinNT://ComputerName/
    IIS_IUSRS,group”
        $ntAccount = New-Object System.Security.Principal.
    NTAccount(“IIS APPPOOL\$Poolinimi”)
        $strSID = $ntAccount.Translate([System.Security.Principal.SecurityIdentifier])
        $user = [ADSI]”WinNT://$strSID”
        $group.Add($user.Path)
        Write-Host “$PooliNimi : Pool gruppi lisatud!.” -foregroundcolor “green”              
    }

    cd IIS:\Sites\   ###Liigume kohta, kuhu lehed salvestatakse
    if (Test-Path $Appinimi -pathType container)    ###Skripti osa, mis kontrollib, kas tehtu on olemas ja kui ei ole, siis loob selle
    {
        return
    }
    $port = 443
    $iisApp = New-Item $Appinimi -bindings @{protocol=”https”;
    bindingInformation=”:443:”} -physicalPath $asukoht
    Write-Output $iisApp

    $iisApp | Set-ItemProperty -Name “applicationPool” -Value $Poolinimi 

NB: Skript tuleks salvestada .ps1 lõpuga!




Veebilehele sertifikaadi lisamise skript:

$certPath = “F:\sertifikaadi\asukoht\arvutis.pfx” 
$certPass = “sertifikaadi salasõna” 
 
 
$pfx = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 
$pfx.Import($certPath,$certPass,”Exportable,PersistKeySet”)  
$store = New-Object System.Security.Cryptography.X509Certificates.X509Store(“My”,”LocalMachine”)  
$store.Open(“ReadWrite”) 
$store.Add($pfx)  
$store.Close()  
$certThumbprint = $pfx.Thumbprint 
Write-host $certThumbprint
$serviceAccount = ‘IIS_IUSRS,IUSR’
$serviceAccounts = $serviceAccount.split(“,”);
foreach($l in $serviceAccounts)
{
write-host $l
$permissionType = ‘Read’
    try
    {
        $cert = ”
        $keyFullPath = ”
        Write-Host “————————–“
        Write-Host “Server: $env:ComputerName” -ForegroundColor Cyan
        Write-Host “Sertifikaadi otsimine…” -ForegroundColor Green
       
        ###Skripti osa, mis proovib soovitud sertifikaati leida
        $cert = Get-ChildItem -Path cert:\LocalMachine\My | Where-Object {$_.Thumbprint -eq ($certThumbprint -replace ‘\s’,”)}
        If ($cert -ne $null -and $cert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName -ne $null)
        {
            $keyPath = $env:ProgramData + “\Microsoft\Crypto\RSA\MachineKeys\”;
            $keyName = $cert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName;
            $keyFullPath = $keyPath + $keyName;
            Write-Host “Leitud sertifikaat…” -ForegroundColor Green
            Write-Host “Õiguste andmine kasutajale $l…” -ForegroundColor Green
            
            ###Skripti osa, mis annab igale määratud kasutajale ligipääsu, loob ja salvestab sellekohase reegli
            $acl = (Get-Item $keyFullPath).GetAccessControl(‘Access’) 
            $buildAcl = New-Object  System.Security.AccessControl.FileSystemAccessRule($l,$permissionType,”Allow”)
            $acl.SetAccessRule($buildAcl) 
            Set-Acl $keyFullPath $acl 
            Write-Host “Luba antud kasutajale: $l…” -ForegroundColor Green
            Write-Host “————————–“
        }
        Else {
            Write-Host “Soovitud sertifikaati jäljele $certThumbprint ei suudetud leida, või puudub selleks võti!” -ForegroundColor Red
            Write-Host “————————–“
        }
    }
    catch
    {
        Write-Host “$1 ei olnud võimalik avada!” -ForegroundColor Yellow
        Write-Host “————————–“
        throw $_;
    }
    } 
    
    
  NB: skript tuleks taaskord salvestada .ps1 failina ning töötab loomaks erinevaid sertifitseeritud veebilehti
